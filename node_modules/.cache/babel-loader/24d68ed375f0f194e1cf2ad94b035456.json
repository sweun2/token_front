{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nimport { tokenizeArgString } from './tokenize-arg-string.js';\nimport { DefaultValuesForTypeKey } from './yargs-parser-types.js';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nlet mixin;\nexport class YargsParser {\n  constructor(_mixin) {\n    mixin = _mixin;\n  }\n\n  parse(argsInput, options) {\n    const opts = Object.assign({\n      alias: undefined,\n      array: undefined,\n      boolean: undefined,\n      config: undefined,\n      configObjects: undefined,\n      configuration: undefined,\n      coerce: undefined,\n      count: undefined,\n      default: undefined,\n      envPrefix: undefined,\n      narg: undefined,\n      normalize: undefined,\n      string: undefined,\n      number: undefined,\n      __: undefined,\n      key: undefined\n    }, options); // allow a string argument to be passed in rather\n    // than an argv array.\n\n    const args = tokenizeArgString(argsInput); // aliases might have transitive relationships, normalize this.\n\n    const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n    const configuration = Object.assign({\n      'boolean-negation': true,\n      'camel-case-expansion': true,\n      'combine-arrays': false,\n      'dot-notation': true,\n      'duplicate-arguments-array': true,\n      'flatten-duplicate-arrays': true,\n      'greedy-arrays': true,\n      'halt-at-non-option': false,\n      'nargs-eats-options': false,\n      'negation-prefix': 'no-',\n      'parse-numbers': true,\n      'parse-positional-numbers': true,\n      'populate--': false,\n      'set-placeholder-key': false,\n      'short-option-groups': true,\n      'strip-aliased': false,\n      'strip-dashed': false,\n      'unknown-options-as-args': false\n    }, opts.configuration);\n    const defaults = Object.assign(Object.create(null), opts.default);\n    const configObjects = opts.configObjects || [];\n    const envPrefix = opts.envPrefix;\n    const notFlagsOption = configuration['populate--'];\n    const notFlagsArgv = notFlagsOption ? '--' : '_';\n    const newAliases = Object.create(null);\n    const defaulted = Object.create(null); // allow a i18n handler to be passed in, default to a fake one (util.format).\n\n    const __ = opts.__ || mixin.format;\n\n    const flags = {\n      aliases: Object.create(null),\n      arrays: Object.create(null),\n      bools: Object.create(null),\n      strings: Object.create(null),\n      numbers: Object.create(null),\n      counts: Object.create(null),\n      normalize: Object.create(null),\n      configs: Object.create(null),\n      nargs: Object.create(null),\n      coercions: Object.create(null),\n      keys: []\n    };\n    const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n    const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n    [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n      const key = typeof opt === 'object' ? opt.key : opt; // assign to flags[bools|strings|numbers]\n\n      const assignment = Object.keys(opt).map(function (key) {\n        const arrayFlagKeys = {\n          boolean: 'bools',\n          string: 'strings',\n          number: 'numbers'\n        };\n        return arrayFlagKeys[key];\n      }).filter(Boolean).pop(); // assign key to be coerced\n\n      if (assignment) {\n        flags[assignment][key] = true;\n      }\n\n      flags.arrays[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n      flags.bools[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n      flags.strings[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n      flags.numbers[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n      flags.counts[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n      flags.normalize[key] = true;\n      flags.keys.push(key);\n    });\n\n    if (typeof opts.narg === 'object') {\n      Object.entries(opts.narg).forEach(_ref => {\n        let [key, value] = _ref;\n\n        if (typeof value === 'number') {\n          flags.nargs[key] = value;\n          flags.keys.push(key);\n        }\n      });\n    }\n\n    if (typeof opts.coerce === 'object') {\n      Object.entries(opts.coerce).forEach(_ref2 => {\n        let [key, value] = _ref2;\n\n        if (typeof value === 'function') {\n          flags.coercions[key] = value;\n          flags.keys.push(key);\n        }\n      });\n    }\n\n    if (typeof opts.config !== 'undefined') {\n      if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n        ;\n        [].concat(opts.config).filter(Boolean).forEach(function (key) {\n          flags.configs[key] = true;\n        });\n      } else if (typeof opts.config === 'object') {\n        Object.entries(opts.config).forEach(_ref3 => {\n          let [key, value] = _ref3;\n\n          if (typeof value === 'boolean' || typeof value === 'function') {\n            flags.configs[key] = value;\n          }\n        });\n      }\n    } // create a lookup table that takes into account all\n    // combinations of aliases: {f: ['foo'], foo: ['f']}\n\n\n    extendAliases(opts.key, aliases, opts.default, flags.arrays); // apply default values to all aliases.\n\n    Object.keys(defaults).forEach(function (key) {\n      (flags.aliases[key] || []).forEach(function (alias) {\n        defaults[alias] = defaults[key];\n      });\n    });\n    let error = null;\n    checkConfiguration();\n    let notFlags = [];\n    const argv = Object.assign(Object.create(null), {\n      _: []\n    }); // TODO(bcoe): for the first pass at removing object prototype  we didn't\n    // remove all prototypes from objects returned by this API, we might want\n    // to gradually move towards doing so.\n\n    const argvReturn = {};\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      const truncatedArg = arg.replace(/^-{3,}/, '---');\n      let broken;\n      let key;\n      let letters;\n      let m;\n      let next;\n      let value; // any unknown option (except for end-of-options, \"--\")\n\n      if (arg !== '--' && isUnknownOptionAsArg(arg)) {\n        pushPositional(arg); // ---, ---=, ----, etc,\n      } else if (truncatedArg.match(/---+(=|$)/)) {\n        // options without key name are invalid.\n        pushPositional(arg);\n        continue; // -- separated by =\n      } else if (arg.match(/^--.+=/) || !configuration['short-option-groups'] && arg.match(/^-.+=/)) {\n        // Using [\\s\\S] instead of . because js doesn't support the\n        // 'dotall' regex modifier. See:\n        // http://stackoverflow.com/a/1068308/13216\n        m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/); // arrays format = '--f=a b c'\n\n        if (m !== null && Array.isArray(m) && m.length >= 3) {\n          if (checkAllAliases(m[1], flags.arrays)) {\n            i = eatArray(i, m[1], args, m[2]);\n          } else if (checkAllAliases(m[1], flags.nargs) !== false) {\n            // nargs format = '--f=monkey washing cat'\n            i = eatNargs(i, m[1], args, m[2]);\n          } else {\n            setArg(m[1], m[2]);\n          }\n        }\n      } else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n        m = arg.match(negatedBoolean);\n\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n          setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n        } // -- separated by space.\n\n      } else if (arg.match(/^--.+/) || !configuration['short-option-groups'] && arg.match(/^-[^-]+/)) {\n        m = arg.match(/^--?(.+)/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n\n          if (checkAllAliases(key, flags.arrays)) {\n            // array format = '--foo a b c'\n            i = eatArray(i, key, args);\n          } else if (checkAllAliases(key, flags.nargs) !== false) {\n            // nargs format = '--foo a b c'\n            // should be truthy even if: flags.nargs[key] === 0\n            i = eatNargs(i, key, args);\n          } else {\n            next = args[i + 1];\n\n            if (next !== undefined && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n              setArg(key, next);\n              i++;\n            } else if (/^(true|false)$/.test(next)) {\n              setArg(key, next);\n              i++;\n            } else {\n              setArg(key, defaultValue(key));\n            }\n          }\n        } // dot-notation flag separated by '='.\n\n      } else if (arg.match(/^-.\\..+=/)) {\n        m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 3) {\n          setArg(m[1], m[2]);\n        } // dot-notation flag separated by space.\n\n      } else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n        next = args[i + 1];\n        m = arg.match(/^-(.\\..+)/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n\n          if (next !== undefined && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n            setArg(key, next);\n            i++;\n          } else {\n            setArg(key, defaultValue(key));\n          }\n        }\n      } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n        letters = arg.slice(1, -1).split('');\n        broken = false;\n\n        for (let j = 0; j < letters.length; j++) {\n          next = arg.slice(j + 2);\n\n          if (letters[j + 1] && letters[j + 1] === '=') {\n            value = arg.slice(j + 3);\n            key = letters[j];\n\n            if (checkAllAliases(key, flags.arrays)) {\n              // array format = '-f=a b c'\n              i = eatArray(i, key, args, value);\n            } else if (checkAllAliases(key, flags.nargs) !== false) {\n              // nargs format = '-f=monkey washing cat'\n              i = eatNargs(i, key, args, value);\n            } else {\n              setArg(key, value);\n            }\n\n            broken = true;\n            break;\n          }\n\n          if (next === '-') {\n            setArg(letters[j], next);\n            continue;\n          } // current letter is an alphabetic character and next value is a number\n\n\n          if (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) && checkAllAliases(next, flags.bools) === false) {\n            setArg(letters[j], next);\n            broken = true;\n            break;\n          }\n\n          if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n            setArg(letters[j], next);\n            broken = true;\n            break;\n          } else {\n            setArg(letters[j], defaultValue(letters[j]));\n          }\n        }\n\n        key = arg.slice(-1)[0];\n\n        if (!broken && key !== '-') {\n          if (checkAllAliases(key, flags.arrays)) {\n            // array format = '-f a b c'\n            i = eatArray(i, key, args);\n          } else if (checkAllAliases(key, flags.nargs) !== false) {\n            // nargs format = '-f a b c'\n            // should be truthy even if: flags.nargs[key] === 0\n            i = eatNargs(i, key, args);\n          } else {\n            next = args[i + 1];\n\n            if (next !== undefined && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n              setArg(key, next);\n              i++;\n            } else if (/^(true|false)$/.test(next)) {\n              setArg(key, next);\n              i++;\n            } else {\n              setArg(key, defaultValue(key));\n            }\n          }\n        }\n      } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {\n        // single-digit boolean alias, e.g: xargs -0\n        key = arg.slice(1);\n        setArg(key, defaultValue(key));\n      } else if (arg === '--') {\n        notFlags = args.slice(i + 1);\n        break;\n      } else if (configuration['halt-at-non-option']) {\n        notFlags = args.slice(i);\n        break;\n      } else {\n        pushPositional(arg);\n      }\n    } // order of precedence:\n    // 1. command line arg\n    // 2. value from env var\n    // 3. value from config file\n    // 4. value from config objects\n    // 5. configured default value\n\n\n    applyEnvVars(argv, true); // special case: check env vars that point to config file\n\n    applyEnvVars(argv, false);\n    setConfig(argv);\n    setConfigObjects();\n    applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n    applyCoercions(argv);\n    if (configuration['set-placeholder-key']) setPlaceholderKeys(argv); // for any counts either not in args or without an explicit default, set to 0\n\n    Object.keys(flags.counts).forEach(function (key) {\n      if (!hasKey(argv, key.split('.'))) setArg(key, 0);\n    }); // '--' defaults to undefined.\n\n    if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = [];\n    notFlags.forEach(function (key) {\n      argv[notFlagsArgv].push(key);\n    });\n\n    if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n      Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n        delete argv[key];\n      });\n    }\n\n    if (configuration['strip-aliased']) {\n      ;\n      [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n        if (configuration['camel-case-expansion'] && alias.includes('-')) {\n          delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n        }\n\n        delete argv[alias];\n      });\n    } // Push argument into positional array, applying numeric coercion:\n\n\n    function pushPositional(arg) {\n      const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n\n      if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n        argv._.push(maybeCoercedNumber);\n      }\n    } // how many arguments should we consume, based\n    // on the nargs option?\n\n\n    function eatNargs(i, key, args, argAfterEqualSign) {\n      let ii;\n      let toEat = checkAllAliases(key, flags.nargs); // NaN has a special meaning for the array type, indicating that one or\n      // more values are expected.\n\n      toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n\n      if (toEat === 0) {\n        if (!isUndefined(argAfterEqualSign)) {\n          error = Error(__('Argument unexpected for: %s', key));\n        }\n\n        setArg(key, defaultValue(key));\n        return i;\n      }\n\n      let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n\n      if (configuration['nargs-eats-options']) {\n        // classic behavior, yargs eats positional and dash arguments.\n        if (args.length - (i + 1) + available < toEat) {\n          error = Error(__('Not enough arguments following: %s', key));\n        }\n\n        available = toEat;\n      } else {\n        // nargs will not consume flag arguments, e.g., -abc, --foo,\n        // and terminates when one is observed.\n        for (ii = i + 1; ii < args.length; ii++) {\n          if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii])) available++;else break;\n        }\n\n        if (available < toEat) error = Error(__('Not enough arguments following: %s', key));\n      }\n\n      let consumed = Math.min(available, toEat);\n\n      if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n        setArg(key, argAfterEqualSign);\n        consumed--;\n      }\n\n      for (ii = i + 1; ii < consumed + i + 1; ii++) {\n        setArg(key, args[ii]);\n      }\n\n      return i + consumed;\n    } // if an option is an array, eat all non-hyphenated arguments\n    // following it... YUM!\n    // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n\n\n    function eatArray(i, key, args, argAfterEqualSign) {\n      let argsToSet = [];\n      let next = argAfterEqualSign || args[i + 1]; // If both array and nargs are configured, enforce the nargs count:\n\n      const nargsCount = checkAllAliases(key, flags.nargs);\n\n      if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {\n        argsToSet.push(true);\n      } else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {\n        // for keys without value ==> argsToSet remains an empty []\n        // set user default value, if available\n        if (defaults[key] !== undefined) {\n          const defVal = defaults[key];\n          argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n        }\n      } else {\n        // value in --option=value is eaten as is\n        if (!isUndefined(argAfterEqualSign)) {\n          argsToSet.push(processValue(key, argAfterEqualSign));\n        }\n\n        for (let ii = i + 1; ii < args.length; ii++) {\n          if (!configuration['greedy-arrays'] && argsToSet.length > 0 || nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount) break;\n          next = args[ii];\n          if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) break;\n          i = ii;\n          argsToSet.push(processValue(key, next));\n        }\n      } // If both array and nargs are configured, create an error if less than\n      // nargs positionals were found. NaN has special meaning, indicating\n      // that at least one value is required (more are okay).\n\n\n      if (typeof nargsCount === 'number' && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && argsToSet.length === 0)) {\n        error = Error(__('Not enough arguments following: %s', key));\n      }\n\n      setArg(key, argsToSet);\n      return i;\n    }\n\n    function setArg(key, val) {\n      if (/-/.test(key) && configuration['camel-case-expansion']) {\n        const alias = key.split('.').map(function (prop) {\n          return camelCase(prop);\n        }).join('.');\n        addNewAlias(key, alias);\n      }\n\n      const value = processValue(key, val);\n      const splitKey = key.split('.');\n      setKey(argv, splitKey, value); // handle populating aliases of the full key\n\n      if (flags.aliases[key]) {\n        flags.aliases[key].forEach(function (x) {\n          const keyProperties = x.split('.');\n          setKey(argv, keyProperties, value);\n        });\n      } // handle populating aliases of the first element of the dot-notation key\n\n\n      if (splitKey.length > 1 && configuration['dot-notation']) {\n        ;\n        (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n          let keyProperties = x.split('.'); // expand alias with nested objects in key\n\n          const a = [].concat(splitKey);\n          a.shift(); // nuke the old key.\n\n          keyProperties = keyProperties.concat(a); // populate alias only if is not already an alias of the full key\n          // (already populated above)\n\n          if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n            setKey(argv, keyProperties, value);\n          }\n        });\n      } // Set normalize getter and setter when key is in 'normalize' but isn't an array\n\n\n      if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n        const keys = [key].concat(flags.aliases[key] || []);\n        keys.forEach(function (key) {\n          Object.defineProperty(argvReturn, key, {\n            enumerable: true,\n\n            get() {\n              return val;\n            },\n\n            set(value) {\n              val = typeof value === 'string' ? mixin.normalize(value) : value;\n            }\n\n          });\n        });\n      }\n    }\n\n    function addNewAlias(key, alias) {\n      if (!(flags.aliases[key] && flags.aliases[key].length)) {\n        flags.aliases[key] = [alias];\n        newAliases[alias] = true;\n      }\n\n      if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n        addNewAlias(alias, key);\n      }\n    }\n\n    function processValue(key, val) {\n      // strings may be quoted, clean this up as we assign values.\n      if (typeof val === 'string' && (val[0] === \"'\" || val[0] === '\"') && val[val.length - 1] === val[0]) {\n        val = val.substring(1, val.length - 1);\n      } // handle parsing boolean arguments --foo=true --bar false.\n\n\n      if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n        if (typeof val === 'string') val = val === 'true';\n      }\n\n      let value = Array.isArray(val) ? val.map(function (v) {\n        return maybeCoerceNumber(key, v);\n      }) : maybeCoerceNumber(key, val); // increment a count given as arg (either no value or value parsed as boolean)\n\n      if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n        value = increment();\n      } // Set normalized value when key is in 'normalize' and in 'arrays'\n\n\n      if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n        if (Array.isArray(val)) value = val.map(val => {\n          return mixin.normalize(val);\n        });else value = mixin.normalize(val);\n      }\n\n      return value;\n    }\n\n    function maybeCoerceNumber(key, value) {\n      if (!configuration['parse-positional-numbers'] && key === '_') return value;\n\n      if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n        const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));\n\n        if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) {\n          value = Number(value);\n        }\n      }\n\n      return value;\n    } // set args from config.json file, this should be\n    // applied last so that defaults can be applied.\n\n\n    function setConfig(argv) {\n      const configLookup = Object.create(null); // expand defaults/aliases, in-case any happen to reference\n      // the config.json file.\n\n      applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n      Object.keys(flags.configs).forEach(function (configKey) {\n        const configPath = argv[configKey] || configLookup[configKey];\n\n        if (configPath) {\n          try {\n            let config = null;\n            const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n            const resolveConfig = flags.configs[configKey];\n\n            if (typeof resolveConfig === 'function') {\n              try {\n                config = resolveConfig(resolvedConfigPath);\n              } catch (e) {\n                config = e;\n              }\n\n              if (config instanceof Error) {\n                error = config;\n                return;\n              }\n            } else {\n              config = mixin.require(resolvedConfigPath);\n            }\n\n            setConfigObject(config);\n          } catch (ex) {\n            // Deno will receive a PermissionDenied error if an attempt is\n            // made to load config without the --allow-read flag:\n            if (ex.name === 'PermissionDenied') error = ex;else if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath));\n          }\n        }\n      });\n    } // set args from config object.\n    // it recursively checks nested objects.\n\n\n    function setConfigObject(config, prev) {\n      Object.keys(config).forEach(function (key) {\n        const value = config[key];\n        const fullKey = prev ? prev + '.' + key : key; // if the value is an inner object and we have dot-notation\n        // enabled, treat inner objects in config the same as\n        // heavily nested dot notations (foo.bar.apple).\n\n        if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n          // if the value is an object but not an array, check nested object\n          setConfigObject(value, fullKey);\n        } else {\n          // setting arguments via CLI takes precedence over\n          // values within the config file.\n          if (!hasKey(argv, fullKey.split('.')) || checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays']) {\n            setArg(fullKey, value);\n          }\n        }\n      });\n    } // set all config objects passed in opts\n\n\n    function setConfigObjects() {\n      if (typeof configObjects !== 'undefined') {\n        configObjects.forEach(function (configObject) {\n          setConfigObject(configObject);\n        });\n      }\n    }\n\n    function applyEnvVars(argv, configOnly) {\n      if (typeof envPrefix === 'undefined') return;\n      const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n      const env = mixin.env();\n      Object.keys(env).forEach(function (envVar) {\n        if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n          // get array of nested keys and convert them to camel case\n          const keys = envVar.split('__').map(function (key, i) {\n            if (i === 0) {\n              key = key.substring(prefix.length);\n            }\n\n            return camelCase(key);\n          });\n\n          if ((configOnly && flags.configs[keys.join('.')] || !configOnly) && !hasKey(argv, keys)) {\n            setArg(keys.join('.'), env[envVar]);\n          }\n        }\n      });\n    }\n\n    function applyCoercions(argv) {\n      let coerce;\n      const applied = new Set();\n      Object.keys(argv).forEach(function (key) {\n        if (!applied.has(key)) {\n          // If we haven't already coerced this option via one of its aliases\n          coerce = checkAllAliases(key, flags.coercions);\n\n          if (typeof coerce === 'function') {\n            try {\n              const value = maybeCoerceNumber(key, coerce(argv[key]));\n              [].concat(flags.aliases[key] || [], key).forEach(ali => {\n                applied.add(ali);\n                argv[ali] = value;\n              });\n            } catch (err) {\n              error = err;\n            }\n          }\n        }\n      });\n    }\n\n    function setPlaceholderKeys(argv) {\n      flags.keys.forEach(key => {\n        // don't set placeholder keys for dot notation options 'foo.bar'.\n        if (~key.indexOf('.')) return;\n        if (typeof argv[key] === 'undefined') argv[key] = undefined;\n      });\n      return argv;\n    }\n\n    function applyDefaultsAndAliases(obj, aliases, defaults) {\n      let canLog = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      Object.keys(defaults).forEach(function (key) {\n        if (!hasKey(obj, key.split('.'))) {\n          setKey(obj, key.split('.'), defaults[key]);\n          if (canLog) defaulted[key] = true;\n          (aliases[key] || []).forEach(function (x) {\n            if (hasKey(obj, x.split('.'))) return;\n            setKey(obj, x.split('.'), defaults[key]);\n          });\n        }\n      });\n    }\n\n    function hasKey(obj, keys) {\n      let o = obj;\n      if (!configuration['dot-notation']) keys = [keys.join('.')];\n      keys.slice(0, -1).forEach(function (key) {\n        o = o[key] || {};\n      });\n      const key = keys[keys.length - 1];\n      if (typeof o !== 'object') return false;else return key in o;\n    }\n\n    function setKey(obj, keys, value) {\n      let o = obj;\n      if (!configuration['dot-notation']) keys = [keys.join('.')];\n      keys.slice(0, -1).forEach(function (key) {\n        // TODO(bcoe): in the next major version of yargs, switch to\n        // Object.create(null) for dot notation:\n        key = sanitizeKey(key);\n\n        if (typeof o === 'object' && o[key] === undefined) {\n          o[key] = {};\n        }\n\n        if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n          // ensure that o[key] is an array, and that the last item is an empty object.\n          if (Array.isArray(o[key])) {\n            o[key].push({});\n          } else {\n            o[key] = [o[key], {}];\n          } // we want to update the empty object at the end of the o[key] array, so set o to that object\n\n\n          o = o[key][o[key].length - 1];\n        } else {\n          o = o[key];\n        }\n      }); // TODO(bcoe): in the next major version of yargs, switch to\n      // Object.create(null) for dot notation:\n\n      const key = sanitizeKey(keys[keys.length - 1]);\n      const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n      const isValueArray = Array.isArray(value);\n      let duplicate = configuration['duplicate-arguments-array']; // nargs has higher priority than duplicate\n\n      if (!duplicate && checkAllAliases(key, flags.nargs)) {\n        duplicate = true;\n\n        if (!isUndefined(o[key]) && flags.nargs[key] === 1 || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) {\n          o[key] = undefined;\n        }\n      }\n\n      if (value === increment()) {\n        o[key] = increment(o[key]);\n      } else if (Array.isArray(o[key])) {\n        if (duplicate && isTypeArray && isValueArray) {\n          o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n        } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n          o[key] = value;\n        } else {\n          o[key] = o[key].concat([value]);\n        }\n      } else if (o[key] === undefined && isTypeArray) {\n        o[key] = isValueArray ? value : [value];\n      } else if (duplicate && !(o[key] === undefined || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) {\n        o[key] = [o[key], value];\n      } else {\n        o[key] = value;\n      }\n    } // extend the aliases list with inferred aliases.\n\n\n    function extendAliases() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.forEach(function (obj) {\n        Object.keys(obj || {}).forEach(function (key) {\n          // short-circuit if we've already added a key\n          // to the aliases array, for example it might\n          // exist in both 'opts.default' and 'opts.key'.\n          if (flags.aliases[key]) return;\n          flags.aliases[key] = [].concat(aliases[key] || []); // For \"--option-name\", also set argv.optionName\n\n          flags.aliases[key].concat(key).forEach(function (x) {\n            if (/-/.test(x) && configuration['camel-case-expansion']) {\n              const c = camelCase(x);\n\n              if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                flags.aliases[key].push(c);\n                newAliases[c] = true;\n              }\n            }\n          }); // For \"--optionName\", also set argv['option-name']\n\n          flags.aliases[key].concat(key).forEach(function (x) {\n            if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n              const c = decamelize(x, '-');\n\n              if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                flags.aliases[key].push(c);\n                newAliases[c] = true;\n              }\n            }\n          });\n          flags.aliases[key].forEach(function (x) {\n            flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n              return x !== y;\n            }));\n          });\n        });\n      });\n    }\n\n    function checkAllAliases(key, flag) {\n      const toCheck = [].concat(flags.aliases[key] || [], key);\n      const keys = Object.keys(flag);\n      const setAlias = toCheck.find(key => keys.includes(key));\n      return setAlias ? flag[setAlias] : false;\n    }\n\n    function hasAnyFlag(key) {\n      const flagsKeys = Object.keys(flags);\n      const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n      return toCheck.some(function (flag) {\n        return Array.isArray(flag) ? flag.includes(key) : flag[key];\n      });\n    }\n\n    function hasFlagsMatching(arg) {\n      for (var _len2 = arguments.length, patterns = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        patterns[_key2 - 1] = arguments[_key2];\n      }\n\n      const toCheck = [].concat(...patterns);\n      return toCheck.some(function (pattern) {\n        const match = arg.match(pattern);\n        return match && hasAnyFlag(match[1]);\n      });\n    } // based on a simplified version of the short flag group parsing logic\n\n\n    function hasAllShortFlags(arg) {\n      // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\n      if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n        return false;\n      }\n\n      let hasAllFlags = true;\n      let next;\n      const letters = arg.slice(1).split('');\n\n      for (let j = 0; j < letters.length; j++) {\n        next = arg.slice(j + 2);\n\n        if (!hasAnyFlag(letters[j])) {\n          hasAllFlags = false;\n          break;\n        }\n\n        if (letters[j + 1] && letters[j + 1] === '=' || next === '-' || /[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\\W/)) {\n          break;\n        }\n      }\n\n      return hasAllFlags;\n    }\n\n    function isUnknownOptionAsArg(arg) {\n      return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n    }\n\n    function isUnknownOption(arg) {\n      arg = arg.replace(/^-{3,}/, '--'); // ignore negative numbers\n\n      if (arg.match(negative)) {\n        return false;\n      } // if this is a short option group and all of them are configured, it isn't unknown\n\n\n      if (hasAllShortFlags(arg)) {\n        return false;\n      } // e.g. '--count=2'\n\n\n      const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/; // e.g. '-a' or '--arg'\n\n      const normalFlag = /^-+([^=]+?)$/; // e.g. '-a-'\n\n      const flagEndingInHyphen = /^-+([^=]+?)-$/; // e.g. '-abc123'\n\n      const flagEndingInDigits = /^-+([^=]+?\\d+)$/; // e.g. '-a/usr/local'\n\n      const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/; // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\n\n      return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n    } // make a best effort to pick a default value\n    // for an option based on name and type.\n\n\n    function defaultValue(key) {\n      if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) {\n        return defaults[key];\n      } else {\n        return defaultForType(guessType(key));\n      }\n    } // return a default value, given the type of a flag.,\n\n\n    function defaultForType(type) {\n      const def = {\n        [DefaultValuesForTypeKey.BOOLEAN]: true,\n        [DefaultValuesForTypeKey.STRING]: '',\n        [DefaultValuesForTypeKey.NUMBER]: undefined,\n        [DefaultValuesForTypeKey.ARRAY]: []\n      };\n      return def[type];\n    } // given a flag, enforce a default type.\n\n\n    function guessType(key) {\n      let type = DefaultValuesForTypeKey.BOOLEAN;\n      if (checkAllAliases(key, flags.strings)) type = DefaultValuesForTypeKey.STRING;else if (checkAllAliases(key, flags.numbers)) type = DefaultValuesForTypeKey.NUMBER;else if (checkAllAliases(key, flags.bools)) type = DefaultValuesForTypeKey.BOOLEAN;else if (checkAllAliases(key, flags.arrays)) type = DefaultValuesForTypeKey.ARRAY;\n      return type;\n    }\n\n    function isUndefined(num) {\n      return num === undefined;\n    } // check user configuration settings for inconsistencies\n\n\n    function checkConfiguration() {\n      // count keys should not be set as array/narg\n      Object.keys(flags.counts).find(key => {\n        if (checkAllAliases(key, flags.arrays)) {\n          error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n          return true;\n        } else if (checkAllAliases(key, flags.nargs)) {\n          error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return {\n      aliases: Object.assign({}, flags.aliases),\n      argv: Object.assign(argvReturn, argv),\n      configuration: configuration,\n      defaulted: Object.assign({}, defaulted),\n      error: error,\n      newAliases: Object.assign({}, newAliases)\n    };\n  }\n\n} // if any aliases reference each other, we should\n// merge them together.\n\nfunction combineAliases(aliases) {\n  const aliasArrays = [];\n  const combined = Object.create(null);\n  let change = true; // turn alias lookup hash {key: ['alias1', 'alias2']} into\n  // a simple array ['key', 'alias1', 'alias2']\n\n  Object.keys(aliases).forEach(function (key) {\n    aliasArrays.push([].concat(aliases[key], key));\n  }); // combine arrays until zero changes are\n  // made in an iteration.\n\n  while (change) {\n    change = false;\n\n    for (let i = 0; i < aliasArrays.length; i++) {\n      for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n        const intersect = aliasArrays[i].filter(function (v) {\n          return aliasArrays[ii].indexOf(v) !== -1;\n        });\n\n        if (intersect.length) {\n          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n          aliasArrays.splice(ii, 1);\n          change = true;\n          break;\n        }\n      }\n    }\n  } // map arrays back to the hash-lookup (de-dupe while\n  // we're at it).\n\n\n  aliasArrays.forEach(function (aliasArray) {\n    aliasArray = aliasArray.filter(function (v, i, self) {\n      return self.indexOf(v) === i;\n    });\n    const lastAlias = aliasArray.pop();\n\n    if (lastAlias !== undefined && typeof lastAlias === 'string') {\n      combined[lastAlias] = aliasArray;\n    }\n  });\n  return combined;\n} // this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\n\n\nfunction increment(orig) {\n  return orig !== undefined ? orig + 1 : 1;\n} // TODO(bcoe): in the next major version of yargs, switch to\n// Object.create(null) for dot notation:\n\n\nfunction sanitizeKey(key) {\n  if (key === '__proto__') return '___proto___';\n  return key;\n}","map":{"version":3,"names":["tokenizeArgString","DefaultValuesForTypeKey","camelCase","decamelize","looksLikeNumber","mixin","YargsParser","constructor","_mixin","parse","argsInput","options","opts","Object","assign","alias","undefined","array","boolean","config","configObjects","configuration","coerce","count","default","envPrefix","narg","normalize","string","number","__","key","args","aliases","combineAliases","create","defaults","notFlagsOption","notFlagsArgv","newAliases","defaulted","format","flags","arrays","bools","strings","numbers","counts","configs","nargs","coercions","keys","negative","negatedBoolean","RegExp","concat","filter","Boolean","forEach","opt","assignment","map","arrayFlagKeys","pop","push","entries","value","Array","isArray","extendAliases","error","checkConfiguration","notFlags","argv","_","argvReturn","i","length","arg","truncatedArg","replace","broken","letters","m","next","isUnknownOptionAsArg","pushPositional","match","checkAllAliases","eatArray","eatNargs","setArg","test","defaultValue","slice","split","j","applyEnvVars","setConfig","setConfigObjects","applyDefaultsAndAliases","applyCoercions","setPlaceholderKeys","hasKey","includes","k","prop","join","maybeCoercedNumber","maybeCoerceNumber","argAfterEqualSign","ii","toEat","isNaN","isUndefined","Error","available","consumed","Math","min","argsToSet","nargsCount","defVal","processValue","val","addNewAlias","splitKey","setKey","x","keyProperties","a","shift","defineProperty","enumerable","get","set","substring","v","increment","shouldCoerceNumber","Number","isSafeInteger","floor","parseFloat","configLookup","configKey","configPath","resolvedConfigPath","resolve","cwd","resolveConfig","e","require","setConfigObject","ex","name","prev","fullKey","configObject","configOnly","prefix","env","envVar","lastIndexOf","applied","Set","has","ali","add","err","indexOf","obj","canLog","o","sanitizeKey","isTypeArray","isValueArray","duplicate","c","y","flag","toCheck","setAlias","find","hasAnyFlag","flagsKeys","some","hasFlagsMatching","patterns","pattern","hasAllShortFlags","hasAllFlags","isUnknownOption","flagWithEquals","normalFlag","flagEndingInHyphen","flagEndingInDigits","flagEndingInNonWordCharacters","defaultForType","guessType","type","def","BOOLEAN","STRING","NUMBER","ARRAY","num","aliasArrays","combined","change","intersect","splice","aliasArray","self","lastAlias","orig"],"sources":["/home/sweun2/Desktop/test/sol/front/node_modules/yargs-parser/build/lib/yargs-parser.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nimport { tokenizeArgString } from './tokenize-arg-string.js';\nimport { DefaultValuesForTypeKey } from './yargs-parser-types.js';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nlet mixin;\nexport class YargsParser {\n    constructor(_mixin) {\n        mixin = _mixin;\n    }\n    parse(argsInput, options) {\n        const opts = Object.assign({\n            alias: undefined,\n            array: undefined,\n            boolean: undefined,\n            config: undefined,\n            configObjects: undefined,\n            configuration: undefined,\n            coerce: undefined,\n            count: undefined,\n            default: undefined,\n            envPrefix: undefined,\n            narg: undefined,\n            normalize: undefined,\n            string: undefined,\n            number: undefined,\n            __: undefined,\n            key: undefined\n        }, options);\n        // allow a string argument to be passed in rather\n        // than an argv array.\n        const args = tokenizeArgString(argsInput);\n        // aliases might have transitive relationships, normalize this.\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n        const configuration = Object.assign({\n            'boolean-negation': true,\n            'camel-case-expansion': true,\n            'combine-arrays': false,\n            'dot-notation': true,\n            'duplicate-arguments-array': true,\n            'flatten-duplicate-arrays': true,\n            'greedy-arrays': true,\n            'halt-at-non-option': false,\n            'nargs-eats-options': false,\n            'negation-prefix': 'no-',\n            'parse-numbers': true,\n            'parse-positional-numbers': true,\n            'populate--': false,\n            'set-placeholder-key': false,\n            'short-option-groups': true,\n            'strip-aliased': false,\n            'strip-dashed': false,\n            'unknown-options-as-args': false\n        }, opts.configuration);\n        const defaults = Object.assign(Object.create(null), opts.default);\n        const configObjects = opts.configObjects || [];\n        const envPrefix = opts.envPrefix;\n        const notFlagsOption = configuration['populate--'];\n        const notFlagsArgv = notFlagsOption ? '--' : '_';\n        const newAliases = Object.create(null);\n        const defaulted = Object.create(null);\n        // allow a i18n handler to be passed in, default to a fake one (util.format).\n        const __ = opts.__ || mixin.format;\n        const flags = {\n            aliases: Object.create(null),\n            arrays: Object.create(null),\n            bools: Object.create(null),\n            strings: Object.create(null),\n            numbers: Object.create(null),\n            counts: Object.create(null),\n            normalize: Object.create(null),\n            configs: Object.create(null),\n            nargs: Object.create(null),\n            coercions: Object.create(null),\n            keys: []\n        };\n        const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n        const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n        [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n            const key = typeof opt === 'object' ? opt.key : opt;\n            // assign to flags[bools|strings|numbers]\n            const assignment = Object.keys(opt).map(function (key) {\n                const arrayFlagKeys = {\n                    boolean: 'bools',\n                    string: 'strings',\n                    number: 'numbers'\n                };\n                return arrayFlagKeys[key];\n            }).filter(Boolean).pop();\n            // assign key to be coerced\n            if (assignment) {\n                flags[assignment][key] = true;\n            }\n            flags.arrays[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n            flags.bools[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n            flags.strings[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n            flags.numbers[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n            flags.counts[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n            flags.normalize[key] = true;\n            flags.keys.push(key);\n        });\n        if (typeof opts.narg === 'object') {\n            Object.entries(opts.narg).forEach(([key, value]) => {\n                if (typeof value === 'number') {\n                    flags.nargs[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.coerce === 'object') {\n            Object.entries(opts.coerce).forEach(([key, value]) => {\n                if (typeof value === 'function') {\n                    flags.coercions[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.config !== 'undefined') {\n            if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n                ;\n                [].concat(opts.config).filter(Boolean).forEach(function (key) {\n                    flags.configs[key] = true;\n                });\n            }\n            else if (typeof opts.config === 'object') {\n                Object.entries(opts.config).forEach(([key, value]) => {\n                    if (typeof value === 'boolean' || typeof value === 'function') {\n                        flags.configs[key] = value;\n                    }\n                });\n            }\n        }\n        // create a lookup table that takes into account all\n        // combinations of aliases: {f: ['foo'], foo: ['f']}\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\n        // apply default values to all aliases.\n        Object.keys(defaults).forEach(function (key) {\n            (flags.aliases[key] || []).forEach(function (alias) {\n                defaults[alias] = defaults[key];\n            });\n        });\n        let error = null;\n        checkConfiguration();\n        let notFlags = [];\n        const argv = Object.assign(Object.create(null), { _: [] });\n        // TODO(bcoe): for the first pass at removing object prototype  we didn't\n        // remove all prototypes from objects returned by this API, we might want\n        // to gradually move towards doing so.\n        const argvReturn = {};\n        for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            const truncatedArg = arg.replace(/^-{3,}/, '---');\n            let broken;\n            let key;\n            let letters;\n            let m;\n            let next;\n            let value;\n            // any unknown option (except for end-of-options, \"--\")\n            if (arg !== '--' && isUnknownOptionAsArg(arg)) {\n                pushPositional(arg);\n                // ---, ---=, ----, etc,\n            }\n            else if (truncatedArg.match(/---+(=|$)/)) {\n                // options without key name are invalid.\n                pushPositional(arg);\n                continue;\n                // -- separated by =\n            }\n            else if (arg.match(/^--.+=/) || (!configuration['short-option-groups'] && arg.match(/^-.+=/))) {\n                // Using [\\s\\S] instead of . because js doesn't support the\n                // 'dotall' regex modifier. See:\n                // http://stackoverflow.com/a/1068308/13216\n                m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n                // arrays format = '--f=a b c'\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    if (checkAllAliases(m[1], flags.arrays)) {\n                        i = eatArray(i, m[1], args, m[2]);\n                    }\n                    else if (checkAllAliases(m[1], flags.nargs) !== false) {\n                        // nargs format = '--f=monkey washing cat'\n                        i = eatNargs(i, m[1], args, m[2]);\n                    }\n                    else {\n                        setArg(m[1], m[2]);\n                    }\n                }\n            }\n            else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n                m = arg.match(negatedBoolean);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n                }\n                // -- separated by space.\n            }\n            else if (arg.match(/^--.+/) || (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))) {\n                m = arg.match(/^--?(.+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '--foo a b c'\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '--foo a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!next.match(/^-/) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n                // dot-notation flag separated by '='.\n            }\n            else if (arg.match(/^-.\\..+=/)) {\n                m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    setArg(m[1], m[2]);\n                }\n                // dot-notation flag separated by space.\n            }\n            else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n                next = args[i + 1];\n                m = arg.match(/^-(.\\..+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (next !== undefined && !next.match(/^-/) &&\n                        !checkAllAliases(key, flags.bools) &&\n                        !checkAllAliases(key, flags.counts)) {\n                        setArg(key, next);\n                        i++;\n                    }\n                    else {\n                        setArg(key, defaultValue(key));\n                    }\n                }\n            }\n            else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n                letters = arg.slice(1, -1).split('');\n                broken = false;\n                for (let j = 0; j < letters.length; j++) {\n                    next = arg.slice(j + 2);\n                    if (letters[j + 1] && letters[j + 1] === '=') {\n                        value = arg.slice(j + 3);\n                        key = letters[j];\n                        if (checkAllAliases(key, flags.arrays)) {\n                            // array format = '-f=a b c'\n                            i = eatArray(i, key, args, value);\n                        }\n                        else if (checkAllAliases(key, flags.nargs) !== false) {\n                            // nargs format = '-f=monkey washing cat'\n                            i = eatNargs(i, key, args, value);\n                        }\n                        else {\n                            setArg(key, value);\n                        }\n                        broken = true;\n                        break;\n                    }\n                    if (next === '-') {\n                        setArg(letters[j], next);\n                        continue;\n                    }\n                    // current letter is an alphabetic character and next value is a number\n                    if (/[A-Za-z]/.test(letters[j]) &&\n                        /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) &&\n                        checkAllAliases(next, flags.bools) === false) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    else {\n                        setArg(letters[j], defaultValue(letters[j]));\n                    }\n                }\n                key = arg.slice(-1)[0];\n                if (!broken && key !== '-') {\n                    if (checkAllAliases(key, flags.arrays)) {\n                        // array format = '-f a b c'\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        // nargs format = '-f a b c'\n                        // should be truthy even if: flags.nargs[key] === 0\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-[0-9]$/) &&\n                arg.match(negative) &&\n                checkAllAliases(arg.slice(1), flags.bools)) {\n                // single-digit boolean alias, e.g: xargs -0\n                key = arg.slice(1);\n                setArg(key, defaultValue(key));\n            }\n            else if (arg === '--') {\n                notFlags = args.slice(i + 1);\n                break;\n            }\n            else if (configuration['halt-at-non-option']) {\n                notFlags = args.slice(i);\n                break;\n            }\n            else {\n                pushPositional(arg);\n            }\n        }\n        // order of precedence:\n        // 1. command line arg\n        // 2. value from env var\n        // 3. value from config file\n        // 4. value from config objects\n        // 5. configured default value\n        applyEnvVars(argv, true); // special case: check env vars that point to config file\n        applyEnvVars(argv, false);\n        setConfig(argv);\n        setConfigObjects();\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n        applyCoercions(argv);\n        if (configuration['set-placeholder-key'])\n            setPlaceholderKeys(argv);\n        // for any counts either not in args or without an explicit default, set to 0\n        Object.keys(flags.counts).forEach(function (key) {\n            if (!hasKey(argv, key.split('.')))\n                setArg(key, 0);\n        });\n        // '--' defaults to undefined.\n        if (notFlagsOption && notFlags.length)\n            argv[notFlagsArgv] = [];\n        notFlags.forEach(function (key) {\n            argv[notFlagsArgv].push(key);\n        });\n        if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n            Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n                delete argv[key];\n            });\n        }\n        if (configuration['strip-aliased']) {\n            ;\n            [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n                if (configuration['camel-case-expansion'] && alias.includes('-')) {\n                    delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n                }\n                delete argv[alias];\n            });\n        }\n        // Push argument into positional array, applying numeric coercion:\n        function pushPositional(arg) {\n            const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n            if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n                argv._.push(maybeCoercedNumber);\n            }\n        }\n        // how many arguments should we consume, based\n        // on the nargs option?\n        function eatNargs(i, key, args, argAfterEqualSign) {\n            let ii;\n            let toEat = checkAllAliases(key, flags.nargs);\n            // NaN has a special meaning for the array type, indicating that one or\n            // more values are expected.\n            toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n            if (toEat === 0) {\n                if (!isUndefined(argAfterEqualSign)) {\n                    error = Error(__('Argument unexpected for: %s', key));\n                }\n                setArg(key, defaultValue(key));\n                return i;\n            }\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n            if (configuration['nargs-eats-options']) {\n                // classic behavior, yargs eats positional and dash arguments.\n                if (args.length - (i + 1) + available < toEat) {\n                    error = Error(__('Not enough arguments following: %s', key));\n                }\n                available = toEat;\n            }\n            else {\n                // nargs will not consume flag arguments, e.g., -abc, --foo,\n                // and terminates when one is observed.\n                for (ii = i + 1; ii < args.length; ii++) {\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii]))\n                        available++;\n                    else\n                        break;\n                }\n                if (available < toEat)\n                    error = Error(__('Not enough arguments following: %s', key));\n            }\n            let consumed = Math.min(available, toEat);\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n                setArg(key, argAfterEqualSign);\n                consumed--;\n            }\n            for (ii = i + 1; ii < (consumed + i + 1); ii++) {\n                setArg(key, args[ii]);\n            }\n            return (i + consumed);\n        }\n        // if an option is an array, eat all non-hyphenated arguments\n        // following it... YUM!\n        // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n        function eatArray(i, key, args, argAfterEqualSign) {\n            let argsToSet = [];\n            let next = argAfterEqualSign || args[i + 1];\n            // If both array and nargs are configured, enforce the nargs count:\n            const nargsCount = checkAllAliases(key, flags.nargs);\n            if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\n                argsToSet.push(true);\n            }\n            else if (isUndefined(next) ||\n                (isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))) {\n                // for keys without value ==> argsToSet remains an empty []\n                // set user default value, if available\n                if (defaults[key] !== undefined) {\n                    const defVal = defaults[key];\n                    argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n                }\n            }\n            else {\n                // value in --option=value is eaten as is\n                if (!isUndefined(argAfterEqualSign)) {\n                    argsToSet.push(processValue(key, argAfterEqualSign));\n                }\n                for (let ii = i + 1; ii < args.length; ii++) {\n                    if ((!configuration['greedy-arrays'] && argsToSet.length > 0) ||\n                        (nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount))\n                        break;\n                    next = args[ii];\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))\n                        break;\n                    i = ii;\n                    argsToSet.push(processValue(key, next));\n                }\n            }\n            // If both array and nargs are configured, create an error if less than\n            // nargs positionals were found. NaN has special meaning, indicating\n            // that at least one value is required (more are okay).\n            if (typeof nargsCount === 'number' && ((nargsCount && argsToSet.length < nargsCount) ||\n                (isNaN(nargsCount) && argsToSet.length === 0))) {\n                error = Error(__('Not enough arguments following: %s', key));\n            }\n            setArg(key, argsToSet);\n            return i;\n        }\n        function setArg(key, val) {\n            if (/-/.test(key) && configuration['camel-case-expansion']) {\n                const alias = key.split('.').map(function (prop) {\n                    return camelCase(prop);\n                }).join('.');\n                addNewAlias(key, alias);\n            }\n            const value = processValue(key, val);\n            const splitKey = key.split('.');\n            setKey(argv, splitKey, value);\n            // handle populating aliases of the full key\n            if (flags.aliases[key]) {\n                flags.aliases[key].forEach(function (x) {\n                    const keyProperties = x.split('.');\n                    setKey(argv, keyProperties, value);\n                });\n            }\n            // handle populating aliases of the first element of the dot-notation key\n            if (splitKey.length > 1 && configuration['dot-notation']) {\n                ;\n                (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n                    let keyProperties = x.split('.');\n                    // expand alias with nested objects in key\n                    const a = [].concat(splitKey);\n                    a.shift(); // nuke the old key.\n                    keyProperties = keyProperties.concat(a);\n                    // populate alias only if is not already an alias of the full key\n                    // (already populated above)\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n                        setKey(argv, keyProperties, value);\n                    }\n                });\n            }\n            // Set normalize getter and setter when key is in 'normalize' but isn't an array\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n                const keys = [key].concat(flags.aliases[key] || []);\n                keys.forEach(function (key) {\n                    Object.defineProperty(argvReturn, key, {\n                        enumerable: true,\n                        get() {\n                            return val;\n                        },\n                        set(value) {\n                            val = typeof value === 'string' ? mixin.normalize(value) : value;\n                        }\n                    });\n                });\n            }\n        }\n        function addNewAlias(key, alias) {\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\n                flags.aliases[key] = [alias];\n                newAliases[alias] = true;\n            }\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n                addNewAlias(alias, key);\n            }\n        }\n        function processValue(key, val) {\n            // strings may be quoted, clean this up as we assign values.\n            if (typeof val === 'string' &&\n                (val[0] === \"'\" || val[0] === '\"') &&\n                val[val.length - 1] === val[0]) {\n                val = val.substring(1, val.length - 1);\n            }\n            // handle parsing boolean arguments --foo=true --bar false.\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n                if (typeof val === 'string')\n                    val = val === 'true';\n            }\n            let value = Array.isArray(val)\n                ? val.map(function (v) { return maybeCoerceNumber(key, v); })\n                : maybeCoerceNumber(key, val);\n            // increment a count given as arg (either no value or value parsed as boolean)\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n                value = increment();\n            }\n            // Set normalized value when key is in 'normalize' and in 'arrays'\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n                if (Array.isArray(val))\n                    value = val.map((val) => { return mixin.normalize(val); });\n                else\n                    value = mixin.normalize(val);\n            }\n            return value;\n        }\n        function maybeCoerceNumber(key, value) {\n            if (!configuration['parse-positional-numbers'] && key === '_')\n                return value;\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n                const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && (Number.isSafeInteger(Math.floor(parseFloat(`${value}`))));\n                if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) {\n                    value = Number(value);\n                }\n            }\n            return value;\n        }\n        // set args from config.json file, this should be\n        // applied last so that defaults can be applied.\n        function setConfig(argv) {\n            const configLookup = Object.create(null);\n            // expand defaults/aliases, in-case any happen to reference\n            // the config.json file.\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n            Object.keys(flags.configs).forEach(function (configKey) {\n                const configPath = argv[configKey] || configLookup[configKey];\n                if (configPath) {\n                    try {\n                        let config = null;\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n                        const resolveConfig = flags.configs[configKey];\n                        if (typeof resolveConfig === 'function') {\n                            try {\n                                config = resolveConfig(resolvedConfigPath);\n                            }\n                            catch (e) {\n                                config = e;\n                            }\n                            if (config instanceof Error) {\n                                error = config;\n                                return;\n                            }\n                        }\n                        else {\n                            config = mixin.require(resolvedConfigPath);\n                        }\n                        setConfigObject(config);\n                    }\n                    catch (ex) {\n                        // Deno will receive a PermissionDenied error if an attempt is\n                        // made to load config without the --allow-read flag:\n                        if (ex.name === 'PermissionDenied')\n                            error = ex;\n                        else if (argv[configKey])\n                            error = Error(__('Invalid JSON config file: %s', configPath));\n                    }\n                }\n            });\n        }\n        // set args from config object.\n        // it recursively checks nested objects.\n        function setConfigObject(config, prev) {\n            Object.keys(config).forEach(function (key) {\n                const value = config[key];\n                const fullKey = prev ? prev + '.' + key : key;\n                // if the value is an inner object and we have dot-notation\n                // enabled, treat inner objects in config the same as\n                // heavily nested dot notations (foo.bar.apple).\n                if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n                    // if the value is an object but not an array, check nested object\n                    setConfigObject(value, fullKey);\n                }\n                else {\n                    // setting arguments via CLI takes precedence over\n                    // values within the config file.\n                    if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\n                        setArg(fullKey, value);\n                    }\n                }\n            });\n        }\n        // set all config objects passed in opts\n        function setConfigObjects() {\n            if (typeof configObjects !== 'undefined') {\n                configObjects.forEach(function (configObject) {\n                    setConfigObject(configObject);\n                });\n            }\n        }\n        function applyEnvVars(argv, configOnly) {\n            if (typeof envPrefix === 'undefined')\n                return;\n            const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n            const env = mixin.env();\n            Object.keys(env).forEach(function (envVar) {\n                if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n                    // get array of nested keys and convert them to camel case\n                    const keys = envVar.split('__').map(function (key, i) {\n                        if (i === 0) {\n                            key = key.substring(prefix.length);\n                        }\n                        return camelCase(key);\n                    });\n                    if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\n                        setArg(keys.join('.'), env[envVar]);\n                    }\n                }\n            });\n        }\n        function applyCoercions(argv) {\n            let coerce;\n            const applied = new Set();\n            Object.keys(argv).forEach(function (key) {\n                if (!applied.has(key)) { // If we haven't already coerced this option via one of its aliases\n                    coerce = checkAllAliases(key, flags.coercions);\n                    if (typeof coerce === 'function') {\n                        try {\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\n                            ([].concat(flags.aliases[key] || [], key)).forEach(ali => {\n                                applied.add(ali);\n                                argv[ali] = value;\n                            });\n                        }\n                        catch (err) {\n                            error = err;\n                        }\n                    }\n                }\n            });\n        }\n        function setPlaceholderKeys(argv) {\n            flags.keys.forEach((key) => {\n                // don't set placeholder keys for dot notation options 'foo.bar'.\n                if (~key.indexOf('.'))\n                    return;\n                if (typeof argv[key] === 'undefined')\n                    argv[key] = undefined;\n            });\n            return argv;\n        }\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n            Object.keys(defaults).forEach(function (key) {\n                if (!hasKey(obj, key.split('.'))) {\n                    setKey(obj, key.split('.'), defaults[key]);\n                    if (canLog)\n                        defaulted[key] = true;\n                    (aliases[key] || []).forEach(function (x) {\n                        if (hasKey(obj, x.split('.')))\n                            return;\n                        setKey(obj, x.split('.'), defaults[key]);\n                    });\n                }\n            });\n        }\n        function hasKey(obj, keys) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                o = (o[key] || {});\n            });\n            const key = keys[keys.length - 1];\n            if (typeof o !== 'object')\n                return false;\n            else\n                return key in o;\n        }\n        function setKey(obj, keys, value) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                // TODO(bcoe): in the next major version of yargs, switch to\n                // Object.create(null) for dot notation:\n                key = sanitizeKey(key);\n                if (typeof o === 'object' && o[key] === undefined) {\n                    o[key] = {};\n                }\n                if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n                    // ensure that o[key] is an array, and that the last item is an empty object.\n                    if (Array.isArray(o[key])) {\n                        o[key].push({});\n                    }\n                    else {\n                        o[key] = [o[key], {}];\n                    }\n                    // we want to update the empty object at the end of the o[key] array, so set o to that object\n                    o = o[key][o[key].length - 1];\n                }\n                else {\n                    o = o[key];\n                }\n            });\n            // TODO(bcoe): in the next major version of yargs, switch to\n            // Object.create(null) for dot notation:\n            const key = sanitizeKey(keys[keys.length - 1]);\n            const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n            const isValueArray = Array.isArray(value);\n            let duplicate = configuration['duplicate-arguments-array'];\n            // nargs has higher priority than duplicate\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\n                duplicate = true;\n                if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\n                    o[key] = undefined;\n                }\n            }\n            if (value === increment()) {\n                o[key] = increment(o[key]);\n            }\n            else if (Array.isArray(o[key])) {\n                if (duplicate && isTypeArray && isValueArray) {\n                    o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n                }\n                else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n                    o[key] = value;\n                }\n                else {\n                    o[key] = o[key].concat([value]);\n                }\n            }\n            else if (o[key] === undefined && isTypeArray) {\n                o[key] = isValueArray ? value : [value];\n            }\n            else if (duplicate && !(o[key] === undefined ||\n                checkAllAliases(key, flags.counts) ||\n                checkAllAliases(key, flags.bools))) {\n                o[key] = [o[key], value];\n            }\n            else {\n                o[key] = value;\n            }\n        }\n        // extend the aliases list with inferred aliases.\n        function extendAliases(...args) {\n            args.forEach(function (obj) {\n                Object.keys(obj || {}).forEach(function (key) {\n                    // short-circuit if we've already added a key\n                    // to the aliases array, for example it might\n                    // exist in both 'opts.default' and 'opts.key'.\n                    if (flags.aliases[key])\n                        return;\n                    flags.aliases[key] = [].concat(aliases[key] || []);\n                    // For \"--option-name\", also set argv.optionName\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (/-/.test(x) && configuration['camel-case-expansion']) {\n                            const c = camelCase(x);\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    // For \"--optionName\", also set argv['option-name']\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n                            const c = decamelize(x, '-');\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].forEach(function (x) {\n                        flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n                            return x !== y;\n                        }));\n                    });\n                });\n            });\n        }\n        function checkAllAliases(key, flag) {\n            const toCheck = [].concat(flags.aliases[key] || [], key);\n            const keys = Object.keys(flag);\n            const setAlias = toCheck.find(key => keys.includes(key));\n            return setAlias ? flag[setAlias] : false;\n        }\n        function hasAnyFlag(key) {\n            const flagsKeys = Object.keys(flags);\n            const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n            return toCheck.some(function (flag) {\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\n            });\n        }\n        function hasFlagsMatching(arg, ...patterns) {\n            const toCheck = [].concat(...patterns);\n            return toCheck.some(function (pattern) {\n                const match = arg.match(pattern);\n                return match && hasAnyFlag(match[1]);\n            });\n        }\n        // based on a simplified version of the short flag group parsing logic\n        function hasAllShortFlags(arg) {\n            // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n                return false;\n            }\n            let hasAllFlags = true;\n            let next;\n            const letters = arg.slice(1).split('');\n            for (let j = 0; j < letters.length; j++) {\n                next = arg.slice(j + 2);\n                if (!hasAnyFlag(letters[j])) {\n                    hasAllFlags = false;\n                    break;\n                }\n                if ((letters[j + 1] && letters[j + 1] === '=') ||\n                    next === '-' ||\n                    (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) ||\n                    (letters[j + 1] && letters[j + 1].match(/\\W/))) {\n                    break;\n                }\n            }\n            return hasAllFlags;\n        }\n        function isUnknownOptionAsArg(arg) {\n            return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n        }\n        function isUnknownOption(arg) {\n            arg = arg.replace(/^-{3,}/, '--');\n            // ignore negative numbers\n            if (arg.match(negative)) {\n                return false;\n            }\n            // if this is a short option group and all of them are configured, it isn't unknown\n            if (hasAllShortFlags(arg)) {\n                return false;\n            }\n            // e.g. '--count=2'\n            const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n            // e.g. '-a' or '--arg'\n            const normalFlag = /^-+([^=]+?)$/;\n            // e.g. '-a-'\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\n            // e.g. '-abc123'\n            const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n            // e.g. '-a/usr/local'\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n            // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n        }\n        // make a best effort to pick a default value\n        // for an option based on name and type.\n        function defaultValue(key) {\n            if (!checkAllAliases(key, flags.bools) &&\n                !checkAllAliases(key, flags.counts) &&\n                `${key}` in defaults) {\n                return defaults[key];\n            }\n            else {\n                return defaultForType(guessType(key));\n            }\n        }\n        // return a default value, given the type of a flag.,\n        function defaultForType(type) {\n            const def = {\n                [DefaultValuesForTypeKey.BOOLEAN]: true,\n                [DefaultValuesForTypeKey.STRING]: '',\n                [DefaultValuesForTypeKey.NUMBER]: undefined,\n                [DefaultValuesForTypeKey.ARRAY]: []\n            };\n            return def[type];\n        }\n        // given a flag, enforce a default type.\n        function guessType(key) {\n            let type = DefaultValuesForTypeKey.BOOLEAN;\n            if (checkAllAliases(key, flags.strings))\n                type = DefaultValuesForTypeKey.STRING;\n            else if (checkAllAliases(key, flags.numbers))\n                type = DefaultValuesForTypeKey.NUMBER;\n            else if (checkAllAliases(key, flags.bools))\n                type = DefaultValuesForTypeKey.BOOLEAN;\n            else if (checkAllAliases(key, flags.arrays))\n                type = DefaultValuesForTypeKey.ARRAY;\n            return type;\n        }\n        function isUndefined(num) {\n            return num === undefined;\n        }\n        // check user configuration settings for inconsistencies\n        function checkConfiguration() {\n            // count keys should not be set as array/narg\n            Object.keys(flags.counts).find(key => {\n                if (checkAllAliases(key, flags.arrays)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n                    return true;\n                }\n                else if (checkAllAliases(key, flags.nargs)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n                    return true;\n                }\n                return false;\n            });\n        }\n        return {\n            aliases: Object.assign({}, flags.aliases),\n            argv: Object.assign(argvReturn, argv),\n            configuration: configuration,\n            defaulted: Object.assign({}, defaulted),\n            error: error,\n            newAliases: Object.assign({}, newAliases)\n        };\n    }\n}\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases(aliases) {\n    const aliasArrays = [];\n    const combined = Object.create(null);\n    let change = true;\n    // turn alias lookup hash {key: ['alias1', 'alias2']} into\n    // a simple array ['key', 'alias1', 'alias2']\n    Object.keys(aliases).forEach(function (key) {\n        aliasArrays.push([].concat(aliases[key], key));\n    });\n    // combine arrays until zero changes are\n    // made in an iteration.\n    while (change) {\n        change = false;\n        for (let i = 0; i < aliasArrays.length; i++) {\n            for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n                const intersect = aliasArrays[i].filter(function (v) {\n                    return aliasArrays[ii].indexOf(v) !== -1;\n                });\n                if (intersect.length) {\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n                    aliasArrays.splice(ii, 1);\n                    change = true;\n                    break;\n                }\n            }\n        }\n    }\n    // map arrays back to the hash-lookup (de-dupe while\n    // we're at it).\n    aliasArrays.forEach(function (aliasArray) {\n        aliasArray = aliasArray.filter(function (v, i, self) {\n            return self.indexOf(v) === i;\n        });\n        const lastAlias = aliasArray.pop();\n        if (lastAlias !== undefined && typeof lastAlias === 'string') {\n            combined[lastAlias] = aliasArray;\n        }\n    });\n    return combined;\n}\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment(orig) {\n    return orig !== undefined ? orig + 1 : 1;\n}\n// TODO(bcoe): in the next major version of yargs, switch to\n// Object.create(null) for dot notation:\nfunction sanitizeKey(key) {\n    if (key === '__proto__')\n        return '___proto___';\n    return key;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}