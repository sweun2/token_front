{"ast":null,"code":"'use strict';\n\nimport { notStrictEqual, strictEqual } from 'assert';\nimport cliui from 'cliui';\nimport escalade from 'escalade/sync';\nimport { format, inspect } from 'util';\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser';\nimport { basename, dirname, extname, relative, resolve } from 'path';\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js';\nimport { YError } from '../../build/lib/yerror.js';\nimport y18n from 'y18n';\nconst REQUIRE_ERROR = 'require is not supported by ESM';\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM';\nconst mainFilename = fileURLToPath(import.meta.url).split('node_modules')[0];\n\nconst __dirname = fileURLToPath(import.meta.url);\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: key => {\n    return process.env[key];\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR);\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR);\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR);\n  },\n  stringWidth: str => {\n    return [...str].length;\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n};","map":{"version":3,"names":["notStrictEqual","strictEqual","cliui","escalade","format","inspect","readFileSync","fileURLToPath","Parser","basename","dirname","extname","relative","resolve","getProcessArgvBin","YError","y18n","REQUIRE_ERROR","REQUIRE_DIRECTORY_ERROR","mainFilename","import","meta","url","split","__dirname","assert","findUp","getEnv","key","process","env","getCallerFile","cwd","path","argv","execPath","exit","nextTick","stdColumns","stdout","columns","require","requireDirectory","stringWidth","str","length","directory","updateFiles"],"sources":["/home/sweun2/Desktop/test/sol/front/node_modules/yargs/lib/platform-shims/esm.mjs"],"sourcesContent":["'use strict'\n\nimport { notStrictEqual, strictEqual } from 'assert'\nimport cliui from 'cliui'\nimport escalade from 'escalade/sync'\nimport { format, inspect } from 'util'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url';\nimport Parser from 'yargs-parser'\nimport { basename, dirname, extname, relative, resolve } from 'path'\nimport { getProcessArgvBin } from '../../build/lib/utils/process-argv.js'\nimport { YError } from '../../build/lib/yerror.js'\nimport y18n from 'y18n'\n\nconst REQUIRE_ERROR = 'require is not supported by ESM'\nconst REQUIRE_DIRECTORY_ERROR = 'loading a directory of commands is not supported yet for ESM'\n\nconst mainFilename = fileURLToPath(import.meta.url).split('node_modules')[0]\nconst __dirname = fileURLToPath(import.meta.url)\n\nexport default {\n  assert: {\n    notStrictEqual,\n    strictEqual\n  },\n  cliui,\n  findUp: escalade,\n  getEnv: (key) => {\n    return process.env[key]\n  },\n  inspect,\n  getCallerFile: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  getProcessArgvBin,\n  mainFilename: mainFilename || process.cwd(),\n  Parser,\n  path: {\n    basename,\n    dirname,\n    extname,\n    relative,\n    resolve\n  },\n  process: {\n    argv: () => process.argv,\n    cwd: process.cwd,\n    execPath: () => process.execPath,\n    exit: process.exit,\n    nextTick: process.nextTick,\n    stdColumns: typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  },\n  readFileSync,\n  require: () => {\n    throw new YError(REQUIRE_ERROR)\n  },\n  requireDirectory: () => {\n    throw new YError(REQUIRE_DIRECTORY_ERROR)\n  },\n  stringWidth: (str) => {\n    return [...str].length\n  },\n  y18n: y18n({\n    directory: resolve(__dirname, '../../../locales'),\n    updateFiles: false\n  })\n}\n"],"mappings":"AAAA;;AAEA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,QAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,OAA/C,QAA8D,MAA9D;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,aAAa,GAAG,iCAAtB;AACA,MAAMC,uBAAuB,GAAG,8DAAhC;AAEA,MAAMC,YAAY,GAAGZ,aAAa,CAACa,MAAM,CAACC,IAAP,CAAYC,GAAb,CAAb,CAA+BC,KAA/B,CAAqC,cAArC,EAAqD,CAArD,CAArB;;AACA,MAAMC,SAAS,GAAGjB,aAAa,CAACa,MAAM,CAACC,IAAP,CAAYC,GAAb,CAA/B;;AAEA,eAAe;EACbG,MAAM,EAAE;IACNzB,cADM;IAENC;EAFM,CADK;EAKbC,KALa;EAMbwB,MAAM,EAAEvB,QANK;EAObwB,MAAM,EAAGC,GAAD,IAAS;IACf,OAAOC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAP;EACD,CATY;EAUbvB,OAVa;EAWb0B,aAAa,EAAE,MAAM;IACnB,MAAM,IAAIhB,MAAJ,CAAWG,uBAAX,CAAN;EACD,CAbY;EAcbJ,iBAda;EAebK,YAAY,EAAEA,YAAY,IAAIU,OAAO,CAACG,GAAR,EAfjB;EAgBbxB,MAhBa;EAiBbyB,IAAI,EAAE;IACJxB,QADI;IAEJC,OAFI;IAGJC,OAHI;IAIJC,QAJI;IAKJC;EALI,CAjBO;EAwBbgB,OAAO,EAAE;IACPK,IAAI,EAAE,MAAML,OAAO,CAACK,IADb;IAEPF,GAAG,EAAEH,OAAO,CAACG,GAFN;IAGPG,QAAQ,EAAE,MAAMN,OAAO,CAACM,QAHjB;IAIPC,IAAI,EAAEP,OAAO,CAACO,IAJP;IAKPC,QAAQ,EAAER,OAAO,CAACQ,QALX;IAMPC,UAAU,EAAE,OAAOT,OAAO,CAACU,MAAR,CAAeC,OAAtB,KAAkC,WAAlC,GAAgDX,OAAO,CAACU,MAAR,CAAeC,OAA/D,GAAyE;EAN9E,CAxBI;EAgCblC,YAhCa;EAiCbmC,OAAO,EAAE,MAAM;IACb,MAAM,IAAI1B,MAAJ,CAAWE,aAAX,CAAN;EACD,CAnCY;EAoCbyB,gBAAgB,EAAE,MAAM;IACtB,MAAM,IAAI3B,MAAJ,CAAWG,uBAAX,CAAN;EACD,CAtCY;EAuCbyB,WAAW,EAAGC,GAAD,IAAS;IACpB,OAAO,CAAC,GAAGA,GAAJ,EAASC,MAAhB;EACD,CAzCY;EA0Cb7B,IAAI,EAAEA,IAAI,CAAC;IACT8B,SAAS,EAAEjC,OAAO,CAACW,SAAD,EAAY,kBAAZ,CADT;IAETuB,WAAW,EAAE;EAFJ,CAAD;AA1CG,CAAf"},"metadata":{},"sourceType":"module"}