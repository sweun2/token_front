{"ast":null,"code":"var _jsxFileName = \"/home/sweun2/Desktop/test/sol/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ATNToken from './utils/ATNToken.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x56f3532eDEeb1D88757E81CB7E8030b278381d7b\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const [toAmount, setToAmount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ATNToken.abi, signer);\n        connectedContract.on(\"Transfer\", (from, amount) => {\n          console.log(from, amount);\n          alert(`토큰이 전송 (transfer) 되었어요! ${from}, 에서 ${amount} 만큼 보냈어요!`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      console.log('timee is working...');\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [toAmount]);\n\n  const TransferUI = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: toAddress,\n      placeholder: \"where to send\",\n      onChange: e => {\n        setToAddress(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: toAmount,\n      placeholder: \"how much to send\",\n      onChange: e => setToAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askContractToTransfer,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My ERC20 Token Transfer Web App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Long Live Smiling Leo, Long Live DSRV!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : TransferUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Wsc2o7oSOwV6SQqEAxvSD1Nvwb0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ethers","React","useEffect","useState","ATNToken","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","toAddress","setToAddress","toAmount","setToAmount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","amount","alert","error","renderNotConnectedContainer","connectWallet","timer","setTimeout","clearTimeout","TransferUI","e","target","value","askContractToTransfer"],"sources":["/home/sweun2/Desktop/test/sol/front/src/App.js"],"sourcesContent":["import './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ATNToken from './utils/ATNToken.json';\n\nconst CONTRACT_ADDRESS =\"0x56f3532eDEeb1D88757E81CB7E8030b278381d7b\";\n\nconst App=()=>{\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [toAddress, setToAddress] = useState(\"\");\n  const [toAmount, setToAmount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ATNToken.abi, signer);\n\n        connectedContract.on(\"Transfer\", (from, amount) => {\n          console.log(from, amount);\n          alert(`토큰이 전송 (transfer) 되었어요! ${from}, 에서 ${amount} 만큼 보냈어요!`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  \n  useEffect(() => {\n    checkIfWalletIsConnected();\n  })\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      console.log('timee is working...')\n    }, 500)\n\n    return () => clearTimeout(timer)\n  }, [toAmount])\n\n  const TransferUI = () => (\n    <div>\n          <input type=\"text\" value={toAddress} placeholder='where to send' onChange={e => { setToAddress(e.target.value) }}></input>\n          <input type=\"text\" value={toAmount} placeholder='how much to send' onChange={(e) => setToAmount(e.target.value)}></input>\n          <button onClick={askContractToTransfer} className=\"cta-button connect-wallet-button\">\n            Transfer\n          </button>\n    </div>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My ERC20 Token Transfer Web App</p>\n          <p className=\"sub-text\">\n            Long Live Smiling Leo, Long Live DSRV!\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : TransferUI()}\n        </div>\n      </div>\n    </div>\n  );\n\n\n}\n\n\n\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}