{"ast":null,"code":"var _jsxFileName = \"/home/sweun2/Desktop/test/sol/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ATNToken from './utils/ATNToken.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x56f3532eDEeb1D88757E81CB7E8030b278381d7b\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"metamask \");\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      let chainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      alert(\"Connected to chain \" + chainId); // String, hex code of the chainId of the Rinkebey test network\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ATNToken.abi, signer);\n        connectedContract.on(\"Transfer\", (from, amount) => {\n          console.log(from, amount);\n          alert(`토큰이 전송 (transfer) 되었어요! ${from}, 에서 ${amount} 만큼 보냈어요!`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n\n  const TransferUI = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askContractToTransfer,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My ERC20 Token Transfer Web App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Long Live Smiling Leo, Long Live DSRV!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : TransferUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ethers","React","useEffect","useState","ATNToken","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","chainId","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","amount","renderNotConnectedContainer","TransferUI","askContractToTransfer"],"sources":["/home/sweun2/Desktop/test/sol/front/src/App.js"],"sourcesContent":["import './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ATNToken from './utils/ATNToken.json';\n\nconst CONTRACT_ADDRESS =\"0x56f3532eDEeb1D88757E81CB7E8030b278381d7b\";\n\nconst App=()=>{\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"metamask \" );\n    }\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\")\n    }\n\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      alert(\"Connected to chain \" + chainId);\n\n      // String, hex code of the chainId of the Rinkebey test network\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ATNToken.abi, signer);\n\n        connectedContract.on(\"Transfer\", (from, amount) => {\n          console.log(from, amount);\n          alert(`토큰이 전송 (transfer) 되었어요! ${from}, 에서 ${amount} 만큼 보냈어요!`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  })\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n  \n  const TransferUI = () => (\n    <div>\n          \n          <button onClick={askContractToTransfer} className=\"cta-button connect-wallet-button\">\n            Transfer\n          </button>\n    </div>\n  )\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My ERC20 Token Transfer Web App</p>\n          <p className=\"sub-text\">\n            Long Live Smiling Leo, Long Live DSRV!\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : TransferUI()}\n        </div>\n        \n      </div>\n    </div>\n  );\n\n\n}\n\n\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}