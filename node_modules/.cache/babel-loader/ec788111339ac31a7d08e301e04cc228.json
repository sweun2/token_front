{"ast":null,"code":"import { YError } from './yerror.js';\nimport { parseCommand } from './parse-command.js';\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\nexport function argsert(arg1, arg2, arg3) {\n  function parseArgs() {\n    return typeof arg1 === 'object' ? [{\n      demanded: [],\n      optional: []\n    }, arg1, arg2] : [parseCommand(`cmd ${arg1}`), arg2, arg3];\n  }\n\n  try {\n    let position = 0;\n    const [parsed, callerArguments, _length] = parseArgs();\n    const args = [].slice.call(callerArguments);\n\n    while (args.length && args[args.length - 1] === undefined) args.pop();\n\n    const length = _length || args.length;\n\n    if (length < parsed.demanded.length) {\n      throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);\n    }\n\n    const totalCommands = parsed.demanded.length + parsed.optional.length;\n\n    if (length > totalCommands) {\n      throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);\n    }\n\n    parsed.demanded.forEach(demanded => {\n      const arg = args.shift();\n      const observedType = guessType(arg);\n      const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*');\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position);\n      position += 1;\n    });\n    parsed.optional.forEach(optional => {\n      if (args.length === 0) return;\n      const arg = args.shift();\n      const observedType = guessType(arg);\n      const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*');\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position);\n      position += 1;\n    });\n  } catch (err) {\n    console.warn(err.stack);\n  }\n}\n\nfunction guessType(arg) {\n  if (Array.isArray(arg)) {\n    return 'array';\n  } else if (arg === null) {\n    return 'null';\n  }\n\n  return typeof arg;\n}\n\nfunction argumentTypeError(observedType, allowedTypes, position) {\n  throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`);\n}","map":{"version":3,"names":["YError","parseCommand","positionName","argsert","arg1","arg2","arg3","parseArgs","demanded","optional","position","parsed","callerArguments","_length","args","slice","call","length","undefined","pop","totalCommands","forEach","arg","shift","observedType","guessType","matchingTypes","cmd","filter","type","argumentTypeError","err","console","warn","stack","Array","isArray","allowedTypes","join"],"sources":["/home/sweun2/Desktop/test/sol/front/node_modules/yargs/build/lib/argsert.js"],"sourcesContent":["import { YError } from './yerror.js';\nimport { parseCommand } from './parse-command.js';\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\nexport function argsert(arg1, arg2, arg3) {\n    function parseArgs() {\n        return typeof arg1 === 'object'\n            ? [{ demanded: [], optional: [] }, arg1, arg2]\n            : [\n                parseCommand(`cmd ${arg1}`),\n                arg2,\n                arg3,\n            ];\n    }\n    try {\n        let position = 0;\n        const [parsed, callerArguments, _length] = parseArgs();\n        const args = [].slice.call(callerArguments);\n        while (args.length && args[args.length - 1] === undefined)\n            args.pop();\n        const length = _length || args.length;\n        if (length < parsed.demanded.length) {\n            throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);\n        }\n        const totalCommands = parsed.demanded.length + parsed.optional.length;\n        if (length > totalCommands) {\n            throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);\n        }\n        parsed.demanded.forEach(demanded => {\n            const arg = args.shift();\n            const observedType = guessType(arg);\n            const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*');\n            if (matchingTypes.length === 0)\n                argumentTypeError(observedType, demanded.cmd, position);\n            position += 1;\n        });\n        parsed.optional.forEach(optional => {\n            if (args.length === 0)\n                return;\n            const arg = args.shift();\n            const observedType = guessType(arg);\n            const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*');\n            if (matchingTypes.length === 0)\n                argumentTypeError(observedType, optional.cmd, position);\n            position += 1;\n        });\n    }\n    catch (err) {\n        console.warn(err.stack);\n    }\n}\nfunction guessType(arg) {\n    if (Array.isArray(arg)) {\n        return 'array';\n    }\n    else if (arg === null) {\n        return 'null';\n    }\n    return typeof arg;\n}\nfunction argumentTypeError(observedType, allowedTypes, position) {\n    throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}