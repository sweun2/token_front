{"ast":null,"code":"var _jsxFileName = \"/home/sweun2/Desktop/test/sol/front/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ATNToken from './utils/ATNToken.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x56f3532eDEeb1D88757E81CB7E8030b278381d7b\";\n\nconst App = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    _s();\n\n    const {\n      ethereum\n    } = window;\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [toAddress, setToAddress] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"metamask \");\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  _s(checkIfWalletIsConnected, \"hwPjUunRrvqKuldQIMNyuQA8zf4=\");\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      checkChainId(); // String, hex code of the chainId of the Rinkebey test network\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n    } catch (error) {\n      console.log(error);\n    }\n  }; /// checkChainID\n\n\n  const checkChainId = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      var chainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      alert(\"Connected to chain \" + chainId);\n      const rinkebyChainId = \"0x4\";\n\n      if (chainId !== rinkebyChainId) {\n        alert(\"You are not connected to the Rinkeby Network!\");\n      } // String, hex code of the chainId of the Rinkebey test network\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToTransfer = async () => {\n    checkChainId();\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n\n  const TransferUI = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: toAddress,\n      placeholder: \"where to send\",\n      onChange: e => {\n        setToAddress(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: toAmount,\n      placeholder: \"how much to send\",\n      onChange: e => setToAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askContractToTransfer,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My ERC20 Token Transfer Web App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Long Live Smiling Leo, Long Live DSRV!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : TransferUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ethers","React","useEffect","useState","ATNToken","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","toAddress","setToAddress","toAmount","setToAmount","console","log","accounts","request","method","length","account","connectWallet","alert","checkChainId","error","chainId","rinkebyChainId","askContractToTransfer","renderNotConnectedContainer","TransferUI","e","target","value"],"sources":["/home/sweun2/Desktop/test/sol/front/src/App.js"],"sourcesContent":["import './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ATNToken from './utils/ATNToken.json';\n\nconst CONTRACT_ADDRESS =\"0x56f3532eDEeb1D88757E81CB7E8030b278381d7b\";\n\nconst App=()=>{\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [toAddress, setToAddress] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"metamask \" );\n    }\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n    } else {\n      console.log(\"No authorized account found\")\n    }\n\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      checkChainId();\n      // String, hex code of the chainId of the Rinkebey test network\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  /// checkChainID\n  const checkChainId= async ()=>{\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      var chainId = await ethereum.request({ method: 'eth_chainId' });\n      alert(\"Connected to chain \" + chainId);\n      const rinkebyChainId = \"0x4\";\n      if (chainId !== rinkebyChainId) {\n        alert(\"You are not connected to the Rinkeby Network!\");\n      }\n      // String, hex code of the chainId of the Rinkebey test network\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  const askContractToTransfer = async () => {\n    checkChainId();\n  }\n  \n  useEffect(() => {\n    checkIfWalletIsConnected();\n  })\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n  \n  const TransferUI = () => (\n    <div>\n          <input type=\"text\" value={toAddress} placeholder='where to send' onChange={e => { setToAddress(e.target.value) }}></input>\n          <input type=\"text\" value={toAmount} placeholder='how much to send' onChange={(e) => setToAmount(e.target.value)}></input>\n          <button onClick={askContractToTransfer} className=\"cta-button connect-wallet-button\">\n            Transfer\n          </button>\n    </div>\n  )\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My ERC20 Token Transfer Web App</p>\n          <p className=\"sub-text\">\n            Long Live Smiling Leo, Long Live DSRV!\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : TransferUI()}\n        </div>\n        \n      </div>\n    </div>\n  );\n\n\n}\n\n\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}